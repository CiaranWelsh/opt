stages:
  - stage: BuildUbuntu
    dependsOn: []
    displayName: Build Ubuntu 18.04
    jobs:
      - job: BuildUbuntuJob
        timeoutInMinutes: "0"
        pool:
          vmImage: 'ubuntu-18.04'
        variables:
          BUILD_DIR: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIR: '$(System.DefaultWorkingDirectory)'
          INSTALL_DIR: '$(System.DefaultWorkingDirectory)/install-azure'
        steps:
          - checkout: self
            submodules: recursive
          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH
          - script: |
              mkdir -p $(BUILD_DIR)
              cd $(BUILD_DIR)
              cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) ..
              cmake --build $(BUILD_DIR) --target install --config Release -j 12
          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(INSTALL_DIR)'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: SRES-Ubuntu
              Parallel: true
              ParallelCount: 8

  - stage: BuildMac
    dependsOn: []
    displayName: Build MacOS
    jobs:
      - job: BuildMacJob
        timeoutInMinutes: "0"
        pool:
          vmImage: 'macOS-10.15'
        variables:
          BUILD_DIR: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIR: '$(System.DefaultWorkingDirectory)'
          INSTALL_DIR: '$(System.DefaultWorkingDirectory)/install-azure'
        steps:
          - checkout: self
            submodules: recursive
          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH
          - bash: sudo chown -R $USER $CONDA
            displayName: Take ownership of conda installation
          - script: |
              mkdir -p $(BUILD_DIR)
              cd $(BUILD_DIR)
              cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) ..
              cmake --build $(BUILD_DIR) --target install --config Release -j 12
          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(INSTALL_DIR)'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: SRES-MacOS
              Parallel: true
              ParallelCount: 8

  - stage: BuildWindows
    displayName: Build Windows
    dependsOn: []
    jobs:
      - job: BuildWindows
        timeoutInMinutes: "0"
        pool:
          vmImage: 'windows-2019'
        variables:
          BUILD_DIR: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIR: '$(System.DefaultWorkingDirectory)'
          INSTALL_DIR: '$(System.DefaultWorkingDirectory)/install-azure'
        steps:
          - checkout: self
            submodules: recursive
          - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
            displayName: Add conda to PATH
          - powershell: |
              New-Item -ItemType Directory -Force -Path $(BUILD_DIR)
              cd $(BUILD_DIR)
              cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) ..
              cmake --build $(BUILD_DIR) --target install --config Release -j 12
          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(INSTALL_DIR)'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: SRES-Windows
              Parallel: true
              ParallelCount: 8

  - stage: UbuntuPipWheel
    dependsOn: BuildUbuntu
    displayName: Build Pip Wheels for Ubuntu
    jobs:
    - job:
      pool:
        vmImage: 'ubuntu-18.04'
      strategy:
        matrix:
          py36:
            PythonVersion: 3.6
            PythonName: py36
          py37:
            PythonVersion: 3.7
            PythonName: py37
          py38:
            PythonVersion: 3.8
            PythonName: py38
          py39:
            PythonVersion: 3.9
            PythonName: py39
      variables:
          MinicondaRoot : '/usr/share/miniconda'
          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
          PythonLibDir: '$(PythonRoot)/lib'
          PythonExecutable: '$(PythonRoot)/bin/python'
          CondaExecutable: '$(MinicondaRoot)/bin/conda'
          PipExecutable: '$(PythonRoot)/bin/pip'
      steps:
        - bash: echo "##vso[task.prependpath]$CONDA/bin"
          displayName: Add conda to PATH
        - download: current
          artifact: SRES-Ubuntu
        - bash: sudo chown -R $USER $CONDA
          displayName: Take ownership of conda installation
        - script: |
            cd $(Pipeline.Workspace)/SRES-Ubuntu
            $(CondaExecutable) create --quiet --yes --name $(PythonName) python=$(PythonVersion)
            export LD_LIBRARY_PATH=$(PythonLibDir)
            $(PythonExecutable) setup.py bdist_wheel
            $(PipExecutable) install "$(pwd)/dist/$(ls dist)"
            $(PythonExecutable) -c "import sres"
        - task: CopyFiles@2
          inputs:
            sourceFolder: '$(Pipeline.Workspace)/SRES-Ubuntu'
            contents: '**'
            targetFolder: '$(Build.ArtifactStagingDirectory)'
        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)'
            artifactName: SRES-Python-Ubuntu
            Parallel: true
            ParallelCount: 8

  - stage: MacPipWheel
    dependsOn: BuildMac
    displayName: Build Pip Wheels for Mac
    jobs:
    - job:
      pool:
        vmImage: 'macOS-10.15'
      strategy:
        matrix:
          py36:
            PythonVersion: 3.6
            PythonName: py36
          py37:
            PythonVersion: 3.7
            PythonName: py37
          py38:
            PythonVersion: 3.8
            PythonName: py38
          py39:
            PythonVersion: 3.9
            PythonName: py39
      variables:
        MinicondaRoot : '/usr/local/miniconda'
        PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
        PythonLibDir: '$(PythonRoot)/lib'
        PythonExecutable: '$(PythonRoot)/bin/python'
        CondaExecutable: '$(MinicondaRoot)/bin/conda'
        PipExecutable: '$(PythonRoot)/bin/pip'
      steps:
        - bash: echo "##vso[task.prependpath]$CONDA/bin"
          displayName: Add conda to PATH
        - download: current
          artifact: SRES-MacOS
        - bash: sudo chown -R $USER $CONDA
          displayName: Take ownership of conda installation
        - script: |
            echo "> Build.ArtifactStagingDirectory: "
            echo "$(Build.ArtifactStagingDirectory)
            echo "> Pipeline.Workspace: "
            echo "$(Pipeline.Workspace)
            echo "> pwd: "
            pwd
            echo "> ls: "
            ls
            echo "> which conda"
            which conda
            echo "> cd $(Pipeline.Workspace)/SRES-MacOS"
            cd $(Pipeline.Workspace)/SRES-MacOS
            $(CondaExecutable) create --quiet --yes --name $(PythonName) python=$(PythonVersion)
            export LD_LIBRARY_PATH=$(PythonLibDir)
            $(PythonExecutable) setup.py bdist_wheel
            $(PipExecutable) install "$(pwd)/dist/$(ls dist)"
            $(PythonExecutable) -c "import sres"
        - task: CopyFiles@2
          inputs:
            sourceFolder: '$(Pipeline.Workspace)/SRES-MacOS'
            contents: '**'
            targetFolder: '$(Build.ArtifactStagingDirectory)'
        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)'
            artifactName: SRES-Python-MacOS
            Parallel: true
            ParallelCount: 8

  - stage: WindowsPipWheel
    dependsOn: BuildWindows
    displayName: Build Pip Wheels for Windows
    jobs:
    - job:
      pool:
        vmImage: 'windows-2019'
      strategy:
        matrix:
          py36:
            PythonVersion: 3.6
            PythonName: py36
          py37:
            PythonVersion: 3.7
            PythonName: py37
          py38:
            PythonVersion: 3.8
            PythonName: py38
          py39:
            PythonVersion: 3.9
            PythonName: py39
      variables:
          MinicondaRoot : 'C:/Miniconda'
          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
          PythonLibDir: '$(PythonRoot)/Lib'
          PythonScriptsDir: '$(PythonRoot)/Scripts'
          PythonExecutable: '$(PythonRoot)/python.exe'
          CondaExecutable: '$(MinicondaRoot)/Scripts/conda.exe'
          PipExecutable: '$(PythonScriptsDir)/pip.exe'
      steps:
        - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
          displayName: Add conda to PATH
        - powershell: |
            where.exe conda
            where.exe python
            echo "PythonVersion $(PythonVersion)"
            echo "PythonName $(PythonName)"
            echo "MinicondaRoot $(MinicondaRoot)"
            echo "PythonRoot $(PythonRoot)"
            echo "PythonLibDir $(PythonLibDir)"
          displayName: PrintPythonVariables
        - download: current
          artifact: SRES-Windows
        - powershell: |
            echo "> pwd"
            pwd
            echo "> dir"
            dir
            echo "> cd Pipeline.Workspace"
            cd "$(Pipeline.Workspace)"
            cd "$(Pipeline.Workspace)/SRES-Windows"
            $(CondaExecutable) create --quiet --yes --name $(PythonName) python=$(PythonVersion)
            $(PythonExecutable) setup.py bdist_wheel
            $(PipExecutable) install "$(pwd)\dist\$(ls dist)"
            $(PythonExecutable) -c "import sres"
        - task: CopyFiles@2
          inputs:
            sourceFolder: '$(Pipeline.Workspace)/SRES-Windows'
            contents: '**'
            targetFolder: '$(Build.ArtifactStagingDirectory)'
        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)'
            artifactName: SRES-Python-Windows
            Parallel: true
            ParallelCount: 8


  - stage: BuildManyLinux
    dependsOn: []
    displayName: Build ManyLinux
    jobs:
      - job: BuildManyLinuxJob
        timeoutInMinutes: "0"
        pool:
          vmImage: 'ubuntu-18.04'
        container: 'quay.io/pypa/manylinux2014_x86_64:latest'
        variables:
          BUILD_DIR: '$(System.DefaultWorkingDirectory)/build'
          SOURCE_DIR: '$(System.DefaultWorkingDirectory)'
          INSTALL_DIR: '$(System.DefaultWorkingDirectory)/install-azure'
        steps:
          - checkout: self
            submodules: recursive
          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH
          - script: |
              mkdir -p $(BUILD_DIR)
              cd $(BUILD_DIR)
              cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) ..
              cmake --build $(BUILD_DIR) --target install --config Release -j 12
          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(INSTALL_DIR)'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: SRES-ManyLinux
              Parallel: true
              ParallelCount: 8

  - stage: ManyLinuxPipWheel
    dependsOn: BuildManyLinux
    displayName: Build Pip Wheels for ManyLinux
    jobs:
    - job:
      pool:
        vmImage: 'ubuntu-18.04'
      container: 'quay.io/pypa/manylinux2014_x86_64:latest'
      strategy:
        matrix:
          py36:
            PythonVersion: cp36-cp36m
          py37:
            PythonVersion: cp37-cp37m
          py38:
            PythonVersion: cp38-cp38
          py39:
            PythonVersion: cp39-cp39
      variables:
          PythonRoot: '/opt/python/$(PythonVersion)'
          PythonLibDir: '$(PythonRoot)/lib'
          PythonBinDir: '$(PythonRoot)/bin'
          PythonExecutable: '$(PythonBinDir)/python'
          PipExecutable: '$(PythonBinDir)/pip'
      steps:
        - download: current
          artifact: SRES-ManyLinux
        - script: |
            echo "> ls"
            ls
            echo "> cd /"
            cd /
            echo "> ls"
            ls
            echo "> cd opt"
            cd opt
            echo "> cd python"
            cd python
        - script: |
            cd $(Pipeline.Workspace)/SRES-ManyLinux
            $(PythonExecutable) setup.py bdist_wheel
            $(PipExecutable) install "$(pwd)/dist/$(ls dist)"
            export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$(PythonLibDir)"
            $(PythonExecutable) -c "import sres"
        - task: CopyFiles@2
          inputs:
            sourceFolder: '$(Pipeline.Workspace)/SRES-ManyLinux'
            contents: '**'
            targetFolder: '$(Build.ArtifactStagingDirectory)'
        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)'
            artifactName: SRES-Python-ManyLinux
            Parallel: true
            ParallelCount: 8
